{"version":3,"sources":["components/Header.js","components/PriceCard.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","react_default","a","createElement","className","href","defaultProps","PriceCard","value","parseInt","isNaN","Math","round","src","alt","header","label","FusionCharts","options","creditLabel","ReactFC","fcRoot","Charts","Widgets","FusionTheme","Body","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","BASE_URL","chartRef","state","btcusd","ltcusd","ethusd","showChart","initValue","dataSource","chart","caption","subCaption","xAxisName","yAxisName","numberPrefix","refreshinterval","slantLabels","numdisplaysets","labeldisplay","showValues","showRealTimeValue","theme","categories","category","clientDateTime","toString","dataset","data","chartConfigs","type","renderAt","width","height","dataFormat","getDataFor","_this2","setInterval","fetch","then","res","json","d","x_axis","y_axis","ticker","price","feedData","conversion","prop","_this3","mode","yAxisMaxValue","yAxisMinValue","setState","startUpdatingData","defineProperty","date_time","Date","curr_hour","getHours","addLeadingZero","getMinutes","getSeconds","components_PriceCard","ReactFC_default","assign","onRender","getChartRef","bind","num","React","Component","App","components_Header","components_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a4e5577.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    const {branding} = props;\n    return (\n        <nav className =\"navbar mb-3 pt-3 pb-3 py-0  text-sm-center text-md-left\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n            </div>\n        </nav>\n\n    \n    );\n}\n\nHeader.defaultProps = {\n    branding: 'Real-Time Cryptocurrency Dashboard'\n\n};\n\nexport default Header;  \n","import React from 'react';\n\nconst PriceCard = (props) => {\n    const value = typeof parseInt(props.value) === 'number' && !isNaN(parseInt(props.value)) ? Math.round(parseInt(props.value)) : props.value;\n    return (\n        <div className=\"card mr-0 custom-card\">\n            <div className=\"card-body\">\n            < img src={props.src} alt={props.src} className = \"img-responsive float-right\"  />\n                <h6 className=\"card-title mb-4 \">{props.header} </h6>\n               \n                <h2 className=\"mb-1 text-primary\">${value}</h2>\n                <p className=\"card-text\"><small className=\"text-muted\">{props.label}</small></p>\n                \n            </div>  \n        </div>\n    )\n};\n\nexport default PriceCard;","import React from 'react';\nimport PriceCard from './PriceCard';\n//import axios from 'axios';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport Widgets from 'fusioncharts/fusioncharts.widgets';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nFusionCharts.options.creditLabel = false;\n\nReactFC.fcRoot(FusionCharts, Charts, Widgets, FusionTheme);\n\nclass Body extends React.Component{\n    constructor(props){\n        super(props);\n        this.BASE_URL = 'https://cors.io/?https://api.cryptonator.com/api/ticker/';\n        this.chartRef = null;\n        this.state = {\n            btcusd: '-',\n            ltcusd: '-',\n            ethusd: '-',\n            showChart: false,\n            initValue: 0,\n            dataSource : {\n                \"chart\": {\n                    \"caption\": \"Bitcoin Ticker\",\n                    \"subCaption\": \"\",\n                    \"xAxisName\": \"Local Time\",\n                    \"yAxisName\": \"USD\",\n                    \"numberPrefix\": \"$\",\n                    \"refreshinterval\": \"2\",\n                    \"slantLabels\": \"1\",\n                    \"numdisplaysets\": \"10\",\n                    \"labeldisplay\": \"rotate\",\n                    \"showValues\": \"0\",\n                    \"showRealTimeValue\": \"0\",\n                    \"theme\": \"fusion\"    \n                },\n                \"categories\": [{\n                    \"category\": [{\n                        \"label\": this.clientDateTime().toString()\n                    }]\n                }],\n                \"dataset\": [{\n                    \"data\": [{\n                        \"value\": 0\n                    }]\n                }]\n            }\n        };\n        this.chartConfigs = {\n            type: 'realtimeline',\n            renderAt: 'container',\n            width: '100%',\n            height: '350',\n            dataFormat: 'json'\n        };\n    }\n\n    componentDidMount() {\n        this.getDataFor('btc-usd', 'btcusd');\n        this.getDataFor('ltc-usd', 'ltcusd');\n        this.getDataFor('eth-usd', 'ethusd');\n    }\n\n    startUpdatingData(){\n        setInterval(() => {\n            fetch(this.BASE_URL + 'btc-usd')\n            .then(res => res.json())\n            .then(d => {\n                let x_axis = this.clientDateTime();\n                let y_axis = d.ticker.price;\n                this.chartRef.feedData(\"&label=\" + x_axis + \"&value=\" + y_axis);\n            });\n        }, 2000);\n    }\n\n\n    getDataFor(conversion, prop){\n        fetch(this.BASE_URL + conversion, {\n            mode: 'cors'\n        })\n        .then(res => res.json())\n        .then(d => {\n            if(prop === 'btcusd'){\n                const dataSource = this.state.dataSource;\n                dataSource.chart.yAxisMaxValue =  parseInt(d.ticker.price) + 5;\n                dataSource.chart.yAxisMinValue =  parseInt(d.ticker.price) - 5;\n                dataSource.dataset[0]['data'][0].value = d.ticker.price;\n                this.setState({\n                    showChart: true,\n                    dataSource: dataSource,\n                    initValue: d.ticker.price\n                }, ()=>{\n                    \n                    this.startUpdatingData();\n                })\n            }\n\n            this.setState({\n                [prop]: d.ticker.price\n            });\n        })\n        \n    }\n\n    static addLeadingZero(num) {\n        return (num <= 9) ? (\"0\" + num) : num;\n    }\n\n\n    clientDateTime() {\n        var date_time = new Date();\n        var curr_hour = date_time.getHours();\n        var zero_added_curr_hour = Body.addLeadingZero(curr_hour);\n        var curr_min = date_time.getMinutes();\n        var curr_sec = date_time.getSeconds();\n        var curr_time = zero_added_curr_hour + ':' + curr_min + ':' + curr_sec;\n        return curr_time\n    }\n\n    getChartRef(chart){\n        this.chartRef = chart;\n        \n      \n    }\n\n\n    render(){\n        return (\n        <div className=\"row mt-5 mt-xs-4\">\n            <div className=\"col-12 mb-3\">\n                 <div className=\"card-deck custom-card-deck\">\n                    <PriceCard header=\"Bitcoin(BTC)\" src={'bitcoin.png'} alt=\"fireSpot\" label=\"(Price in USD)\"   value={this.state.btcusd} />\n                    <PriceCard header=\"Litecoin(LTC)\"   src={'litecoin.png'} alt=\"fireSpot\" label=\"(Price in USD)\"  value={this.state.ltcusd}/>\n                    <PriceCard header=\"Ethereum(ETH)\" src={'ethereum.png'} alt=\"fireSpot\" label=\"(Price in USD)\"    value={this.state.ethusd}/>\n                    \n                   \n        \n\n                 </div>          \n            </div>\n            <div className=\"col-12\">\n                <div className=\"card custom-card mb-5 mb-xs-4\">\n                   <div className=\"card-body\">\n                            {\n                            this.state.showChart ? \n                            <ReactFC \n                            {...this.chartConfigs}\n                            dataSource={this.state.dataSource} \n                            onRender={this.getChartRef.bind(this)}/>: null\n                        }\n                   </div>\n                </div>\n            </div>\n\t\t</div>\n        )\n    }\n}\n\n export default Body;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport  'bootstrap/dist/css/bootstrap.min.css';\nimport '../src/style.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <Header branding = \"Real-Time Cryptocurrency Dashboard\"/>\n        <div className=\"container\">\n        \n        \n        <Body />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\n"],"sourceRoot":""}